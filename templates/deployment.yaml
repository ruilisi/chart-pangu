apiVersion: apps/v1
{{- if .Values.kind }}
kind: {{ .Values.kind }}
{{- else}}
kind: Deployment
{{- end}}
metadata:
  name: {{ include "myChart.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "myChart.name" . }}
    helm.sh/chart: {{ include "myChart.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
{{- if .Values.kind }}
  serviceName: {{ include "myChart.fullname" . }}
{{- end}}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "myChart.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "myChart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        date: {{ now | date "20060102150405" | quote }}
    spec:
    {{- if .Values.volumes }}
      volumes:
      {{- toYaml .Values.volumes | nindent 10 }}
    {{- end }}
      imagePullSecrets:
        - name: regcred
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.command }}
          command:
          {{- toYaml .Values.command | nindent 10 }}
        {{- end }}
          env:
          {{- range $name, $value := .Values.env }}
            - name: {{ $name }}
              value: {{ $value | quote  }}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
        {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
          {{- toYaml (unset .Values.livenessProbe "enabled") | nindent 12 }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
          {{- toYaml (unset .Values.readinessProbe "enabled") | nindent 12 }}
        {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.persistence }}
          volumeMounts:
            {{ if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              subPath: {{ .Values.persistence.subPath }}
            {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- if .Values.persistence }}
{{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
{{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
{{- end }}
{{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
{{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: "standard"
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}
{{- end }}
